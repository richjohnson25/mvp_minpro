// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  uid               String   @id @default(cuid())
  first_name        String   @db.VarChar(25)
  last_name         String   @db.VarChar(25)
  username          String
  address           String
  phone_number      String   @db.VarChar(15)
  role              Role
  email             String   @db.VarChar(50)
  password          String   @db.VarChar(15)
  referral_code     String   @db.VarChar(20)
  points            Int
  registration_date DateTime

  eventsOrganized    Event[]            @relation("EventsOrganized")
  //eventsParticipated Event[]            @relation("EventsParticipated")
  //participations     EventParticipant[]
  transactions       Transaction[]
  reviews            Review[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

enum Role {
  PARTICIPANT
  ORGANIZER
}

model Event {
  id              Int       @id @default(autoincrement())
  name            String    
  date            DateTime
  time            DateTime
  location        String
  description     String
  available_seats Int
  price           Decimal   @db.Decimal(10, 2)
  ticket_types    String

  organizer_uid   String
  event_organizer User?  @relation("EventsOrganized", fields: [organizer_uid], references: [uid])

  //participant_uid   String
  //event_participant User?  @relation("EventsParticipated", fields: [participant_uid], references: [uid])

  category_id      Int
  event_categories Category @relation(fields: [category_id], references: [id])

  //participants EventParticipant[]
  transactions Transaction[]
  vouchers     Voucher[]
  reviews      Review[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("events")
}

// model EventParticipant {
//   id Int @id @default(autoincrement())

//   participant_uid String
//   participants    User   @relation(fields: [participant_uid], references: [uid])

//   event_id Int
//   events   Event @relation(fields: [event_id], references: [id])

//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?

//   @@map("event_participants")
// }

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  events Event[]

  @@map("categories")
}

model Transaction {
  id             Int           @id @default(autoincrement())
  participant_id Int
  date           DateTime
  time           DateTime
  amount_paid    Decimal       @db.Decimal(10, 2)
  status         PaymentStatus

  event_id Int
  events   Event @relation(fields: [event_id], references: [id])

  participant_uid String
  participants    User   @relation(fields: [participant_uid], references: [uid])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transactions")
}

enum PaymentStatus {
  Pending
  Completed
  Cancelled
}

model Voucher {
  id              Int      @id @default(autoincrement())
  code            String   @db.VarChar(50)
  discount_amount Decimal  @db.Decimal(10, 2)
  max_uses        Int
  valid_from      DateTime
  valid_until     DateTime

  event_id Int
  events   Event @relation(fields: [event_id], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("vouchers")
}

model Review {
  id                 Int    @id @default(autoincrement())
  rating             Int
  overall_experience String @db.Text
  event_quality      String @db.Text
  suggestions        String @db.Text

  event_id Int
  events   Event @relation(fields: [event_id], references: [id])

  participant_uid String
  participants    User   @relation(fields: [participant_uid], references: [uid])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Catatan relationship:
// User dengan role = "Organizer" dapat mengorganisir banyak event
// User dengan role = "Participant" dapat mengikuti banyak event
// Beberapa event bisa dikategorikan dalam satu kategori tertentu
// Jika user dengan role = "Participant" mengikuti event dengan tipe "Paid", user bisa mengajukan banyak transaksi
// Sebuah event bisa memiliki banyak voucher
